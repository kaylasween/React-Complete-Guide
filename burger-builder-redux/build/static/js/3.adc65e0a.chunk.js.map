{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputStyles","styles","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","onChange","changed","elementConfig","value","options","map","option","key","htmlFor","id","label","style","color","module","exports","auth","Auth","state","controls","email","type","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedAuthForm","updateObject","_this","_Users_kaylasween_Documents_Projects_React_Complete_Guide_burger_builder_redux_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElements","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","error","border","background","padding","message","onSubmit","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","buttonType","clicked","Component","connect","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.adc65e0a.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './Input.module.css'\n\nconst input = props => {\n  let inputElement = null\n  const inputStyles = [styles.inputElement]\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputStyles.push(styles.invalid)\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input className={inputStyles.join(' ')} onChange={props.changed} {...props.elementConfig} value={props.value} />\n      break\n    case ('textarea'):\n      inputElement = <textarea className={inputStyles.join(' ')} onChange={props.changed} {...props.elementConfig} value={props.value} />\n      break\n    case ('select'):\n      inputElement = (\n        <select className={inputStyles.join(' ')} onChange={props.changed} value={props.value}>\n          {props.elementConfig.options.map(option => (\n            <option key={option} value={option}>{option}</option>\n          ))}\n        </select>\n      )\n      break\n    default:\n      inputElement = <input className={inputStyles.join(' ')} onChange={props.changed} {...props.elementConfig} value={props.value} />\n  }\n\n  return (\n    <div className={styles.input}>\n      <label htmlFor={props.id}>{props.label}</label>\n      {inputElement}\n      {props.invalid && props.touched && props.shouldValidate && props.id !== 'zip' ?\n        <p style={{ color: 'red' }}>{props.label} is a required field!</p> : null}\n      {props.invalid && props.touched && props.shouldValidate && props.id === 'zip' ?\n        <p style={{ color: 'red' }}>{props.label} should be 5 digits in length!</p> : null}\n    </div>\n  )\n}\n\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__gc_Om\",\"inputElement\":\"Input_inputElement__3ymTU\",\"invalid\":\"Input_invalid__2T-zf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Auth_auth___KSBm\"};","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport * as actions from '../../store/actions/index'\nimport { checkValidity, updateObject } from '../../shared/utility'\n\nimport styles from './Auth.module.css'\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email'\n        },\n        value: '',\n        label: 'Email',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password'\n        },\n        value: '',\n        label: 'Password',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    isSignUp: true\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath()\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedAuthForm = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    })\n\n    this.setState({ controls: updatedAuthForm })\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault()\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignUp: !prevState.isSignUp }\n    })\n  }\n\n  render() {\n    const formElements = []\n    for (let key in this.state.controls) {\n      formElements.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    const form = formElements.map(formElement => (\n      <Input key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        id={formElement.id}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        value={formElement.config.value}\n        label={formElement.config.label}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n    ))\n\n    return (\n      <div className={styles.auth}>\n        {this.props.isAuthenticated && <Redirect to={this.props.authRedirectPath} />}\n        {this.props.error ? (<div style={{ border: '1px solid darkred', background: 'salmon', padding: '10px' }}>{this.props.error.message}</div>) : null}\n        <form onSubmit={this.submitHandler}>\n          <h2>Sign in/Sign up</h2>\n          {this.props.loading ? <Spinner /> : form}\n          <Button buttonType=\"cta\">Submit</Button>\n        </form>\n        {/* Temporary button to switch between sign up and sign in */}\n        <Button buttonType=\"cancel\" clicked={this.switchAuthModeHandler}>Switch to Sign {this.state.isSignUp ? 'in' : 'up'}</Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"],"sourceRoot":""}