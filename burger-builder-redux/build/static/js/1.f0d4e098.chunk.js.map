{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputStyles","styles","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","onChange","changed","elementConfig","value","options","map","option","key","htmlFor","id","label","style","color","module","exports","checkoutSummary","contactData","react_default","width","margin","Burger","ingredients","Button","buttonType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","validation","required","valid","address","zip","minLength","maxLength","country","email","deliveryMethod","formValid","orderHandler","event","preventDefault","formData","formElId","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputId","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElements","config","loading","Spinner","onSubmit","formEl","Input","disabled","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","Fragment","purchased","react_router","to","CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/1.f0d4e098.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './Input.module.css'\n\nconst input = props => {\n  let inputElement = null\n  const inputStyles = [styles.inputElement]\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputStyles.push(styles.invalid)\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input className={inputStyles.join(' ')} onChange={props.changed} {...props.elementConfig} value={props.value} />\n      break\n    case ('textarea'):\n      inputElement = <textarea className={inputStyles.join(' ')} onChange={props.changed} {...props.elementConfig} value={props.value} />\n      break\n    case ('select'):\n      inputElement = (\n        <select className={inputStyles.join(' ')} onChange={props.changed} value={props.value}>\n          {props.elementConfig.options.map(option => (\n            <option key={option} value={option}>{option}</option>\n          ))}\n        </select>\n      )\n      break\n    default:\n      inputElement = <input className={inputStyles.join(' ')} onChange={props.changed} {...props.elementConfig} value={props.value} />\n  }\n\n  return (\n    <div className={styles.input}>\n      <label htmlFor={props.id}>{props.label}</label>\n      {inputElement}\n      {props.invalid && props.touched && props.shouldValidate && props.id !== 'zip' ?\n        <p style={{ color: 'red' }}>{props.label} is a required field!</p> : null}\n      {props.invalid && props.touched && props.shouldValidate && props.id === 'zip' ?\n        <p style={{ color: 'red' }}>{props.label} should be 5 digits in length!</p> : null}\n    </div>\n  )\n}\n\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__gc_Om\",\"inputElement\":\"Input_inputElement__3ymTU\",\"invalid\":\"Input_invalid__2T-zf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkoutSummary\":\"CheckoutSummary_checkoutSummary__1Nt-6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactData\":\"ContactData_contactData__yodnF\"};","import React from 'react'\n\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\n\nimport styles from './CheckoutSummary.module.css'\n\nconst checkoutSummary = props => (\n  <div className={styles.checkoutSummary}>\n    <h1>We hope it tastes good!</h1>\n    <div\n      style={{\n        width: '100%',\n        margin: 'auto'\n      }}\n    >\n      <Burger ingredients={props.ingredients} />\n    </div>\n    <Button buttonType=\"cancel\" clicked={props.checkoutCancelled}>\n      CANCEL\n    </Button>\n    <Button buttonType=\"cta\" clicked={props.checkoutContinued}>\n      CONTINUE\n    </Button>\n  </div>\n)\n\nexport default checkoutSummary\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport axios from '../../../axios-orders'\n\nimport styles from './ContactData.module.css'\n\nimport Button from '../../../components/UI/Button/Button'\nimport Input from '../../../components/UI/Input/Input'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\n\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index'\nimport { checkValidity, updateObject } from '../../../shared/utility'\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text'\n        },\n        value: '',\n        label: 'Name',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      address: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text'\n        },\n        value: '',\n        label: 'Street Address',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zip: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text'\n        },\n        value: '',\n        label: 'Postal Code',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text'\n        },\n        value: '',\n        label: 'Country',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email'\n        },\n        value: '',\n        label: 'Email Address',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: ['fastest', 'cheapest']\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true,\n        label: 'Delivery Method'\n      },\n    },\n    formValid: false\n  }\n\n  orderHandler = event => {\n    event.preventDefault()\n\n    const formData = {}\n\n    for (let formElId in this.state.orderForm) {\n      formData[formElId] = this.state.orderForm[formElId].value\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n\n    this.props.onOrderBurger(order, this.props.token)\n  }\n\n  inputChangedHandler = (event, inputId) => {\n\n    const updatedFormElement = updateObject(this.state.orderForm[inputId], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputId].validation),\n      touched: true\n    })\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputId]: updatedFormElement\n    })\n\n    let formValid = true\n    for (let inputId in updatedOrderForm) {\n      formValid = updatedOrderForm[inputId].valid && formValid\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formValid: formValid })\n  }\n\n  render() {\n    const formElements = []\n    for (let key in this.state.orderForm) {\n      formElements.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    return (\n      <div className={styles.contactData}>\n        <h2>Enter your contact data</h2>\n        {this.props.loading ? (\n          <Spinner />\n        ) : (\n            <form onSubmit={this.orderHandler}>\n              {formElements.map(formEl => (\n                <Input\n                  key={formEl.id}\n                  elementType={formEl.config.elementType}\n                  elementConfig={formEl.config.elementConfig}\n                  id={formEl.id}\n                  invalid={!formEl.config.valid}\n                  shouldValidate={formEl.config.validation}\n                  touched={formEl.config.touched}\n                  value={formEl.config.value}\n                  label={formEl.config.label}\n                  changed={(event) => this.inputChangedHandler(event, formEl.id)} />\n              ))}\n\n              <Button buttonType=\"cta\" clicked={this.orderHandler} disabled={!this.state.formValid}>\n                ORDER\n              </Button>\n            </form>\n          )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))\n","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from './ContactData/ContactData'\n\nclass Checkout extends Component {\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack()\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data')\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.ings && this.props.purchased ? <Redirect to=\"/\" /> : null}\n        {this.props.ings ? (\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n        ) : <Redirect to=\"/\" />}\n        <Route\n          path={this.props.match.path + '/contact-data'}\n          component={ContactData}\n        />\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  }\n}\n\nexport default connect(mapStateToProps)(Checkout)\n"],"sourceRoot":""}